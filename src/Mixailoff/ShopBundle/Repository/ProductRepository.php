<?php

namespace Mixailoff\ShopBundle\Repository;

use Mixailoff\ShopBundle\Entity\Product;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     * @param integer $currentPage
     * @return Product[]
     */
    public function getAllProducts($pageNumber)
    {
        $query = $this
            ->createQueryBuilder('p')
            ->where('p.isVisible = 1')
            ->andWhere('p.quantity != 0')
            ->OrderBy('p.createdAt', 'DESC')
            ->setFirstResult(9 * ($pageNumber - 1))
            ->setMaxResults(9)
            ->getQuery();

        $paginator = new Paginator($query, $fetchJoinCollection = true);

        return $paginator;
    }

    public function getProductsByCategory($catId, $pageNumber)
    {
        $query = $this
            ->createQueryBuilder('p')
            ->where('p.isVisible = 1')
            ->andWhere('p.quantity != 0')
            ->andWhere('p.productcategory = ' . $catId)
            ->OrderBy('p.createdAt', 'DESC')
            ->setFirstResult(9 * ($pageNumber - 1))
            ->setMaxResults(9)
            ->getQuery();

        $products = $query->getResult();
        $paginator = new Paginator($query, $fetchJoinCollection = true);
        $results = array($paginator, $products);

        return $results;
    }

    public function getProductsByFilter($pageNumber, $minPrice = 1, $maxPrice = 9999)
    {
        $query = $this
            ->createQueryBuilder('p')
            ->where('p.isVisible = 1')
            ->andWhere('p.quantity != 0')
            ->andWhere('p.price >= ' . $minPrice)
            ->andWhere('p.price <= ' . $maxPrice)
            ->OrderBy('p.createdAt', 'DESC')
            ->setFirstResult(9 * ($pageNumber - 1))
            ->setMaxResults(9)
            ->getQuery();

        $paginator = new Paginator($query, $fetchJoinCollection = true);

        return $paginator;
    }
}
