<?php

namespace Mixailoff\ShopBundle\Repository;


/**
 * PromotionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PromotionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return int
     */
    public function getBiggestActiveGlobalPromotion()
    {
        $now = new \DateTime();
        $query = $this
            ->createQueryBuilder('pr')
            ->select('pr.percent')
            ->where('pr.startDate <= :now')
            ->andWhere('pr.endDate >= :now')
            ->andWhere('pr.category is NULL')
            ->andWhere('pr.product is NULL')
            ->setParameter(':now', $now)
            ->orderBy('pr.percent', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        if ($query !== null) {
            return $query['percent'];
        } else {
            return 0;
        }
    }

    public function getBiggestActiveCategoryPromotion($categoryId)
    {
        $now = new \DateTime();
        $query = $this
            ->createQueryBuilder('pr')
            ->select('pr.percent')
            ->where('pr.startDate <= :now')
            ->andWhere('pr.endDate >= :now')
            ->andWhere('pr.category = ' . $categoryId)
            ->setParameter(':now', $now)
            ->orderBy('pr.percent', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        if ($query !== null) {
            return $query['percent'];
        } else {
            return 0;
        }
    }

    public function getBiggestActiveProductPromotion($productId)
    {
        $now = new \DateTime();
        $query = $this
            ->createQueryBuilder('pr')
            ->select('pr.percent')
            ->where('pr.startDate <= :now')
            ->andWhere('pr.endDate >= :now')
            ->andWhere('pr.product = ' . $productId)
            ->setParameter(':now', $now)
            ->orderBy('pr.percent', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        if ($query !== null) {
            return $query['percent'];
        } else {
            return 0;
        }
    }
}
